package proyecto;

/*
java.net.URL url = getClass().getResource("1.png");
       System.out.println(url);
        mensajes.setText("<html><img src="+url+"></img></html>");
*/

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.*;
import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.filechooser.FileSystemView;


public class Cliente extends javax.swing.JFrame implements Runnable{

    /**
     * Creates new form Cliente
     */
    DataInputStream input;
    BufferedInputStream bis;
    BufferedOutputStream bos;
    JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
    byte[] byteArray;
    int in;
    Paquetes datos = new  Paquetes();
    public Cliente() {
        initComponents();
        Thread mihilo = new Thread(this);
        mihilo.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        nick = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        ip = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        mensajes = new javax.swing.JTextArea();
        campo1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        sendFile = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jLabel1.setText("Nickname");

        jLabel2.setText("IP");

        mensajes.setColumns(20);
        mensajes.setRows(5);
        jScrollPane1.setViewportView(mensajes);

        campo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campo1ActionPerformed(evt);
            }
        });
        campo1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                campo1KeyPressed(evt);
            }
        });

        jButton1.setText("Enviar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        sendFile.setText("Adjuntar Archivo");
        sendFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(106, 106, 106)
                        .addComponent(sendFile))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(nick, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(ip, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(campo1)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nick, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(ip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(campo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(sendFile))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void campo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campo1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campo1ActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        System.out.println(evt.getKeyCode());
    }//GEN-LAST:event_formKeyPressed

    private void campo1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campo1KeyPressed
        if(evt.getKeyCode()==10){
            enviarTexto();
        }
    }//GEN-LAST:event_campo1KeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       enviarTexto();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void sendFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendFileActionPerformed
        datos.setArchivo(true);
        datos.setTexto(false);
        datos.setIp(ip.getText());
        datos.setNick(nick.getText());
        try {
            int returnValue = jfc.showOpenDialog(null);
            String path="";
            // int returnValue = jfc.showSaveDialog(null);
            
            if (returnValue == JFileChooser.APPROVE_OPTION) {
                File selectedFile = jfc.getSelectedFile();
                path = selectedFile.getAbsolutePath();
            }
            File file = new File(path);
            Socket cliente = new Socket("192.168.1.71",2512);//server port
            bis = new BufferedInputStream(new FileInputStream(file));
            bos = new BufferedOutputStream(cliente.getOutputStream());
            //Enviamos el nombre del fichero
            DataOutputStream dos = new DataOutputStream(cliente.getOutputStream());
            FileInputStream ficheroStream = new FileInputStream(file);
            datos.setNameA(file.getName());
            //Enviamos el fichero
            int tam = (int)file.length();
            byteArray = new byte[tam];
            ficheroStream.read(byteArray);
            datos.setTam(tam);
            datos.setArchi(byteArray);
            ObjectOutputStream paqueteDatos = new ObjectOutputStream(cliente.getOutputStream());
            paqueteDatos.writeObject(datos);
           
            bis.close();
            bos.close();
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
        }
        datos.setArchivo(false);
    }//GEN-LAST:event_sendFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField campo1;
    private javax.swing.JTextField ip;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea mensajes;
    private javax.swing.JTextField nick;
    private javax.swing.JButton sendFile;
    // End of variables declaration//GEN-END:variables

     @Override
    public void run() {
        //si es archivo hacer tal 
        //si es texto hacer tal
        try {
                ServerSocket receptor = new ServerSocket(4118);
                Socket clienteReceptor = new Socket();
                Paquetes paqueteRecibido = new Paquetes();
                
                while (true) {
                    clienteReceptor=receptor.accept();
                    
                    ObjectInputStream flujoReceptor = new ObjectInputStream(clienteReceptor.getInputStream());
                    paqueteRecibido=(Paquetes) flujoReceptor.readObject();
                    if(paqueteRecibido.isTexto()){
                        mensajes.append("\n" + paqueteRecibido.getNick() + ": " + paqueteRecibido.getMensaje());
                    }
                    else if(paqueteRecibido.isArchivo()){
                        //Buffer de 1024 bytes
                         String name = paqueteRecibido.getNameA();
                         
                         //convertir byte array a fichero =)
                         byte []fileArray = new byte[paqueteRecibido.getTam()];
                         fileArray = paqueteRecibido.getArchi();
                         
                         FileOutputStream fileOuputStream = new FileOutputStream(name);
			fileOuputStream.write(fileArray);
			fileOuputStream.close();
                    }
                    clienteReceptor.close();
                }
            } catch (IOException  | ClassNotFoundException ex) {
                System.err.println(ex.getMessage());
            }
    }
    
    
    
    public void enviarTexto(){
            datos.setTexto(true);
            datos.setArchivo(false);
            try {
                //System.out.println(campo1.getText());
                
                mensajes.append("\n" + "YO: " + campo1.getText());

                Socket cliente = new Socket("192.168.1.71",2512);//,server ip server port
                
                datos.setIp(ip.getText());
                datos.setNick(nick.getText());
                datos.setMensaje(campo1.getText());
                
                ObjectOutputStream paqueteDatos = new ObjectOutputStream(cliente.getOutputStream());
                paqueteDatos.writeObject(datos);
                paqueteDatos.close();
                
                campo1.setText("");
                
                cliente.close();
            } catch (IOException ex) {
                
                System.err.println(ex.getMessage());
            }
            datos.setTexto(false);
            
        }
    
    
    
}
