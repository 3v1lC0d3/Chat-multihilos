package proyecto;

import javax.swing.*;
import java.awt.*;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;


public class Sever extends javax.swing.JFrame  implements Runnable{

    /**
     * Creates new form Sever
     */
    public Sever() {
        initComponents();
        Thread escuchando = new Thread(this);
        escuchando.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        areatexto = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        areatexto.setColumns(20);
        areatexto.setRows(5);
        jScrollPane1.setViewportView(areatexto);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Sever.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Sever.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Sever.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Sever.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Sever().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areatexto;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    
    
    @Override
    public void run() {
        try {
                //System.out.println("Escuchando...");
                ServerSocket servidor = new ServerSocket(2512);
                String nick, ip, mensaje;
                while (true) {
                    Socket misocket = servidor.accept();
                    Paquetes  recibido = new Paquetes();                 
                    ObjectInputStream paqueteDatos = new ObjectInputStream(misocket.getInputStream());
                    recibido= (Paquetes) paqueteDatos.readObject();
                    
                    
                    System.out.println(recibido.isArchivo());
                    
                    if(recibido.isTexto()){//si es texto envia texto
                    ip=recibido.getIp();
                    nick=recibido.getNick();
                    recibido.setMensaje(recibido.getMensaje().replace("<body>","<body>\n"+recibido.getNick()+":"));
                    mensaje=recibido.getMensaje();
                        //System.out.println(recibido.getMensaje());
                    areatexto.append("\n" + nick + ": " + mensaje + " para: " + ip);
                    Socket destinatario = new Socket(ip, 4118);                  
                    ObjectOutputStream reenvio = new ObjectOutputStream(destinatario.getOutputStream());
                    reenvio.writeObject(recibido);
                    reenvio.close();
                    destinatario.close();
                    }
                    
                    else if(recibido.isArchivo()){
                    ip=recibido.getIp();
                    nick=recibido.getNick();
                    areatexto.append("\nSE ENVIO ARCHIVO de " + nick + " para " + ip);
                    Socket destinatario = new Socket(ip, 4118);                  
                    ObjectOutputStream reenvio = new ObjectOutputStream(destinatario.getOutputStream());
                    reenvio.writeObject(recibido);
                    reenvio.close();
                    destinatario.close();
                    }
                     
                    
                    
                    misocket.close();
                }
         
            } catch (IOException  | ClassNotFoundException ex) {
                System.err.println(ex.getMessage());
            }
    }
    
    
}

